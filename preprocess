#!/usr/bin/env python
import re
import fileinput
import subprocess
try:
    from pygments import highlight
    from pygments.lexers import PythonLexer
    from pygments.formatters import HtmlFormatter
    GOT_PYGMENTS = True
except Exception:
    GOT_PYGMENTS = False

RE_INCLUDE = re.compile(r'^\s*#include \<(?P<filename>[^:]*)(:(?P<partno>\d+))?\>\s*$')
RE_RESULT = re.compile(r'^\s*#result \<(?P<command>.*)\>\s*$')
RE_PYTHON = re.compile(r'^\s*#python\s*$')
RE_ENDPYTHON = re.compile(r'^\s*#endpython\s*$')
RE_IGNORE = re.compile(r'IGNOREBEYOND')
RE_PARTMARK = re.compile(r'^\s*#\s*PART\s*(?P<partno>\d+)\s*$')

_cache = {} # filename => [line1, line2, ...]
_part = {} # filename => [part1_endline, part2_endline, ..]
def read_pyfile(filename, part=None):
    if filename not in _cache:
        _part[filename] = [0]
        incfile = file(filename, 'r')
        inclines = []
        for incline in incfile:
            if RE_IGNORE.search(incline):
                break
            if RE_PARTMARK.match(incline):
                _part[filename].append(len(inclines))
            else:
                inclines.append(incline.rstrip())
        _part[filename].append(len(inclines))
        _cache[filename] = inclines
    if part is None:
        return _cache[filename]
    else:
        start_line = _part[filename][int(part)-1]
        end_line = _part[filename][int(part)]
        return _cache[filename][start_line:end_line]

interactive = False
python_lines = []
for line in fileinput.input():
    m_inc = RE_INCLUDE.match(line)
    m_res = RE_RESULT.match(line)
    m_start = RE_PYTHON.match(line)
    m_end = RE_ENDPYTHON.match(line)
    if interactive:
        if m_end:
            interactive = False
            print "<blockquote><table cellpadding=5 bgcolor=lightblue><tr><td><pre>"
            proc = subprocess.Popen("python",
                                    stdin=subprocess.PIPE,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT)
            for pline in python_lines:
                print ">>> %s" % pline
                proc.stdin.write(pline)
            print proc.communicate()[0]
            print "</pre></td></tr></table></blockquote>"
        else:
            python_lines.append(line)
    elif m_start:
        interactive = True
        python_lines = []
    elif m_inc:
        inclines = read_pyfile(m_inc.group('filename'), m_inc.group('partno'))
        pycode = '\n'.join(inclines)
        if GOT_PYGMENTS:
            print highlight(pycode, PythonLexer(), HtmlFormatter())
        else:
            # Default to raw printout
            print "<blockquote><table cellpadding=5 bgcolor=lightblue><tr><td><pre>"
            print pycode
            print "</pre></td></tr></table></blockquote>"
    elif m_res:
        cmd = m_res.group('command')
        proc = subprocess.Popen(cmd.split(),
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        p_stdout, p_stderr = proc.communicate()
        print p_stdout
    else:
        print line,
    
