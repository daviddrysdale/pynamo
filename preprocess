#!/usr/bin/env python
import sys
import re
import fileinput
import subprocess
import traceback
try:
    from pygments import highlight
    from pygments.lexers import PythonLexer
    from pygments.formatters import HtmlFormatter
    GOT_PYGMENTS = True
except Exception:
    GOT_PYGMENTS = False

RE_PYFILE = re.compile(r'^.*\.py')
RE_INCLUDE = re.compile(r'^\s*#include \<(?P<filename>[^:]*)(:(?P<partid>\w+))?\>\s*$')
RE_RESULT = re.compile(r'^\s*#result \<(?P<command>[^>]*)\>(?P<rest>.*)$')
RE_PYTHON = re.compile(r'^\s*#python\s*$')
RE_ENDPYTHON = re.compile(r'^\s*#endpython\s*$')
RE_IGNORE = re.compile(r'IGNOREBEYOND')
RE_SKIPLINE = re.compile(r'^\s*_logger.*$')
RE_PARTMARK = re.compile(r'^\s*#\s*PART\s*(?P<partid>\w+)\s*$')
HTML_PRE_START='<div class="highlight"><pre>'
HTML_PRE_END='</pre></div>'

_cache = {} # filename => [line1, line2, ...]
_part = {} # filename => {partid1: (start,end), partid2: (start,end)}
def read_file(filename, desired_partid=None):
    partid = None
    if filename not in _cache:
        _part[filename] = {}
        incfile = file(filename, 'r')
        inclines = []
        for incline in incfile:
            if RE_SKIPLINE.match(incline):
                continue
            if RE_IGNORE.search(incline):
                break
            m = RE_PARTMARK.match(incline)
            if m:
                if partid is not None:
                    _part[filename][partid][1] = len(inclines)
                partid = m.group('partid')
                _part[filename][partid] = [len(inclines),-1]
            else:
                inclines.append(incline.rstrip())
        _cache[filename] = inclines
    if partid is not None: # Close out the final part
        _part[filename][partid][1] = len(inclines)

    if desired_partid is None:
        return _cache[filename]
    else:
        start_line = _part[filename][desired_partid][0]
        end_line = _part[filename][desired_partid][1]
        return _cache[filename][start_line:end_line]

interactive = False
python_lines = []
for line in fileinput.input():
    m_inc = RE_INCLUDE.match(line)
    m_res = RE_RESULT.match(line)
    m_start = RE_PYTHON.match(line)
    m_end = RE_ENDPYTHON.match(line)
    if interactive:
        if m_end:
            interactive = False
            print HTML_PRE_START
            for pline in python_lines:
                print ">>> <b>%s</b>" % pline.rstrip()
                try:
                    exec pline.rstrip()
                except Exception:
                    print "Traceback (most recent call last):"
                    tb = traceback.extract_tb(sys.exc_traceback)
                    for eline in traceback.format_list(tb)[1:]:
                        print eline,
                    print "Exception: %s" % sys.exc_value
            print HTML_PRE_END
        else:
            python_lines.append(line)
    elif m_start:
        interactive = True
        python_lines = []
    elif m_inc:
        filename = m_inc.group('filename')
        inclines = read_file(filename, m_inc.group('partid'))
        file_conts = '\n'.join(inclines)
        if RE_PYFILE.match(filename) and GOT_PYGMENTS:
            print highlight(file_conts, PythonLexer(), HtmlFormatter())
        else:
            # Default to raw printout
            print HTML_PRE_START
            print file_conts
            print HTML_PRE_END
    elif m_res:
        cmd = m_res.group('command')
        proc = subprocess.Popen(cmd.split(),
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        p_stdout, p_stderr = proc.communicate()
        print p_stdout,
        print m_res.group('rest')
    else:
        print line,
    
